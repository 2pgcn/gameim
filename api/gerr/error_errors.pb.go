// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package gerr

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsDefaultSuccess(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TypeStatusCode_DEFAULT_SUCCESS.String() && e.Code == 500
}

func ErrorDefaultSuccess(format string, args ...interface{}) *errors.Error {
	return errors.New(500, TypeStatusCode_DEFAULT_SUCCESS.String(), fmt.Sprintf(format, args...))
}

func IsServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TypeStatusCode_SERVER_ERROR.String() && e.Code == 500
}

func ErrorServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, TypeStatusCode_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsAuthError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TypeStatusCode_AUTH_ERROR.String() && e.Code == 500
}

func ErrorAuthError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, TypeStatusCode_AUTH_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsAuthAppidError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == TypeStatusCode_AUTH_APPID_ERROR.String() && e.Code == 500
}

func ErrorAuthAppidError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, TypeStatusCode_AUTH_APPID_ERROR.String(), fmt.Sprintf(format, args...))
}
